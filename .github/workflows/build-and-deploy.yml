name: Build NixOS Channel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Mondays at 6 AM UTC
  workflow_dispatch:      # Manual trigger

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Clean previous builds
      run: |
        rm -f result*
        rm -rf store-paths binary-cache metadata CHANNEL_LAYOUT

    - name: Install Nix
      uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Setup Cachix
      uses: cachix/cachix-action@v14
      with:
        name: inselfcontroll
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    - name: Update packages
      run: |
        if [ -f update.sh ]; then
          chmod +x update.sh
          ./update.sh
        else
          echo "No update.sh found, skipping package updates"
        fi

    - name: Build packages
      run: |
        export NIX_PATH="nixpkgs=channel:nixos-unstable"
        nix-channel --update nixpkgs || echo "Channel update failed, continuing..."
        
        if [ -f package.nix ]; then
          echo "Building package.nix..."
          if nix-build package.nix; then
            echo "✓ package.nix built successfully"
          else
            echo "⚠ package.nix build failed, continuing..."
          fi
        fi
        
        if [ -f default.nix ]; then
          echo "Building default.nix..."
          if nix-build default.nix -I nixpkgs=channel:nixos-unstable; then
            echo "✓ default.nix built successfully"
          else
            echo "⚠ default.nix build failed, continuing..."
          fi
        fi
        
        echo -e "\n=== Build Results ==="
        ls -la result* 2>/dev/null || echo "No build artifacts found"

    - name: Generate channel structure
      run: |
        mkdir -p {store-paths,binary-cache,metadata}
        
        # Generate store paths from builds
        if ls result* >/dev/null 2>&1; then
          for result in result*; do
            if [ -L "$result" ]; then
              readlink "$result" >> store-paths/build-paths.txt
            fi
          done
        fi
        
        find /nix/store -maxdepth 1 -type d -name "*-*" | sort > store-paths/store-paths.txt
        echo "Generated $(wc -l < store-paths/store-paths.txt) store paths"

        cat > binary-cache/nix-cache-info << EOF
        StoreDir: /nix/store
        WantMassQuery: 1
        Priority: 30
        EOF

        cat > metadata/channel-info.json << EOF
        {
          "generated": "$(date -Iseconds)",
          "commit": "${{ github.sha }}",
          "build": "${{ github.run_number }}",
          "runner": "self-hosted",
          "store_paths_count": $(wc -l < store-paths/store-paths.txt),
          "build_paths": $([ -f store-paths/build-paths.txt ] && wc -l < store-paths/build-paths.txt || echo 0)
        }
        EOF

    - name: Create channel manifest
      run: |
        cat > CHANNEL_LAYOUT << EOF
        # NixOS Channel
        # Generated: $(date)
        # Commit: ${{ github.sha }}
        # Build: ${{ github.run_number }}
        # Store paths: $(wc -l < store-paths/store-paths.txt)

        This is a NixOS channel repository.

        Available endpoints:
        - /store-paths/ - Store path listings  
        - /binary-cache/ - Binary cache files
        - /metadata/ - Package metadata and build info

        Latest build: $(date -Iseconds)
        EOF

    - name: Validate build
      run: |
        echo "=== Build Summary ==="
        echo "Store paths: $(wc -l < store-paths/store-paths.txt)"
        echo "Binary cache info: $([ -f binary-cache/nix-cache-info ] && echo "✓" || echo "✗")"
        echo "Channel manifest: $([ -f CHANNEL_LAYOUT ] && echo "✓" || echo "✗")"
        echo "Metadata: $([ -f metadata/channel-info.json ] && echo "✓" || echo "✗")"
        
        echo -e "\n=== Generated Files ==="
        find . -type f -not -path './.git/*' -not -path './result*' | sort
        
        echo -e "\n✓ Channel ready for automatic Cloudflare Pages deployment"
